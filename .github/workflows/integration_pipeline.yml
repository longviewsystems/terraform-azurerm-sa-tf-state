name: 'CI trigger for testing, versioning, and tagging'

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '**.sh'
      - '.gitignore'
  pull_request:

    defaults:
      run:
        shell: bash # use bash shell regardless of the type of Github Actions runner

jobs:
  checkov-tests:
    name: 'Run Checkov | Static Code Analysis'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          soft_fail: true
          skip_check:  CKV2_AZURE_21,CKV2_GHA_1
  tflint:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3
      name: Checkout source code
      
    - uses: actions/cache@v3
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v2
      name: Setup TFLint
      with:
        tflint_version: v0.45.0

    - name: Show version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init

    - name: Init Terraform
      run: terraform init

    - name: Run TFLint
      run: tflint -f compact
  go-tests:
    name: 'Run Terratest | Unit Testing'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 # checkout the repo to the Github Actions runner
      - uses: actions/setup-go@v1 # setup the go environment
        with:
          go-version: 1.17
      - uses: hashicorp/setup-terraform@v2 # setup the terraform environment
        with:
          terraform_version: 1.1.3
          terraform_wrapper: false
      - name: 'Install Go Modules'
        working-directory: test
        run: go mod download
      - name: 'Run Terratest'
        working-directory: test
        run: go test -v -timeout 45m
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUB_ID_SUB_LVS_CMP_DEV }}
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID_SP_CLOUDMANAGEMENTPLATFORM_PIPELINE_SERVICECONNECTION_DEV }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET_SP_CLOUDMANAGEMENTPLATFORM_PIPELINE_SERVICECONNECTION_DEV }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID_LVS }}

  tag_module:
    name: 'Automated Tagging and Versioning using semantic-release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: actions/setup-node@v1 #Install Node 15 apt repo
        with:
          node-version: 18
      - name: Install node modules
        run: |
          npm install npx semantic-release
          npm install @semantic-release/git @semantic-release/changelog
      - name: 'Run semantic-release'
        run: npx semantic-release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_SEMANTIC_RELEASE }} #custom PAT with repo scope needed to operate on protected branches
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}           


